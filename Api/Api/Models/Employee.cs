// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Api.Exceptions;
using System;
using System.Collections.Generic;

namespace Api.Models
{
    //public partial class Employee
    //{
    //    public Employee()
    //    {
    //        InverseManager = new HashSet<Employee>();
    //        Request = new HashSet<Request>();
    //    }

    //    public int Id { get; set; }
    //    public string FirstName { get; set; }
    //    public string LastName { get; set; }
    //    public int? ManagerId { get; set; }
    //    public decimal? Salary { get; set; }
    //    public string Email { get; set; }

    //    public virtual Employee Manager { get; set; }
    //    public virtual ICollection<Employee> InverseManager { get; set; }
    //    public virtual ICollection<Request> Request { get; set; }
    //}

    public class Employee
    {
        private Employee()
        {
            //need for EF
        }
        public Employee(string firstName, string lastName, int? managerId, decimal? salary, string email)
        {
            FirstName = firstName;
            LastName = lastName;
            ManagerId = managerId;
            Salary = salary;
            Email = email; 
        }

        public int Id {get;private set; }
        public string FirstName { get; private set; }
        public string LastName { get; private set; }
        public int? ManagerId { get; private set; }
        public decimal? Salary { get; private set; }
        public string Email { get; private set; }

        public void AdjustSalary(decimal? salary)
        {
            if (salary < 0 || salary > 1000000) //this duplication validation can be replace by using ValueObject
            {
                throw new BusinessLogicException($"{nameof(salary)} must be between 0 and 1000000");
            }

            if (FirstName == "Hoang" && salary < 100000)
            {
                throw new BusinessLogicException($"Employee Hoang cannot have salary < 100000");
            }

            Salary = salary;
        }

        public void UpdateManager(int? managerId)
        {
            ManagerId = managerId;
        }

        public bool IsManagedUnder(int managerId)
        {
            return ManagerId == managerId;
        }

        public void UpdateEmployeeInfo(string firstName, string lastName, string email)
        {
            LastName = lastName;
            FirstName = firstName;
            Email = email;
        }

        public  Employee Manager { get; private set; }
        public  List<Employee> Subordinates { get; private set; }
        public  List<Request> Request { get; private set; }
    }
}